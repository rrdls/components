import * as THREE from "three";
import { LineMaterial } from "three/examples/jsm/lines/LineMaterial";
import { Createable, Event, UI, Component, Disposable } from "../../base-types";
import { Components } from "../../core";
import { Button } from "../../ui";
import { AngleMeasureElement } from "../AngleMeasureElement";
export declare class AngleMeasurement extends Component<AngleMeasureElement[]> implements Createable, UI, Disposable {
    name: string;
    uiElement: {
        main: Button;
    };
    private _lineMaterial;
    private _components;
    private _enabled;
    private _vertexPicker;
    private _currentAngleElement;
    private _clickCount;
    private _measurements;
    readonly beforeCreate: Event<any>;
    readonly afterCreate: Event<AngleMeasureElement>;
    readonly beforeCancel: Event<any>;
    readonly afterCancel: Event<any>;
    readonly beforeDelete: Event<any>;
    readonly afterDelete: Event<any>;
    set lineMaterial(material: LineMaterial);
    get lineMaterial(): LineMaterial;
    set enabled(value: boolean);
    get enabled(): boolean;
    set workingPlane(plane: THREE.Plane | null);
    get workingPlane(): THREE.Plane | null;
    constructor(components: Components);
    dispose(): void;
    private setUI;
    create: () => void;
    delete(): void;
    endCreation(): void;
    cancelCreation(): void;
    get(): AngleMeasureElement[];
    private setupEvents;
    private onMouseMove;
    private onKeyDown;
}
